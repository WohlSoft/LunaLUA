-------------------------------------------------------------------------------
-- AirpEngine2 Coding Rule
-- 
-- rev : 2016/02/14
-------------------------------------------------------------------------------

1. 基本
	基本的なコーディングのルールは以下の通り.
	
	* オブジェクト指向(詳細は2章を参照)
	* 非公開メンバ名には__プレフィクスを用いる
	* AirpEngineで用いるメンバ名には_プレフィクスを用いる
	* インデント文字にはTabを用いる(半角スペース4文字分)
	* ifの条件式は()で括る
	* 仮引数間には半角スペース一つを挿入する
	e.g.)	[Good]
				example(var1, var2, var3)
			[Bad]
				example(var1,var2,var3)
	* 引数として渡す場合以外には無名関数を用いない
	e.g.)	[Good]
				function foo(bar, baz) end
			[Bad]
				foo = function(bar, baz) end
	* 利用出来ない場合を除き全て:シンタックスシュガーを用いる
	e.g.)	[Good]
				function Foo:bar(var1)
			[Bad]
				function Foo.bar(self, var1)

2. オブジェクト指向
	各種機能はモジュール化され,オブジェクトとして扱われる.
	具体的なサンプル及び雛形に関しては"AirpEngine2/classes/example.lua"を参照.
	
	2.1. クラスの読み込み
		全てのクラスは"AirpEngine2/classes/"ディレクトリに存在する.
		
		全てのクラスはAE2名前空間テーブルに属し,"AirpEngine2/initialize.lua"
		にて宣言される.
		
		各種クラスはLuaのメタテーブル機能を用いて実装されており,
		クラスの宣言の他にLuaのメタテーブルに関する宣言も必要となる.
		AE2.importメソッドはこの宣言を自動化する.
		この関数は"AirpEngine2/initialize.lua"の読み込み時に行われる.
		
		処理の流れは以下の通り
		
		1. "lunaworld.lua"にてloadSharedAPI関数を用いAirpEngine2がロードされる
		2. AirpEngine2のロード時に"AirpEngine2/initialize.lua"が読み込まれる
		3. "initialize.lua"によりAE2.importメソッドを用いてAE2名前空間が初期化される
		4. AE2名前空間に属する各種クラスのインスタンスを生成し、AirpEngine2クラスのメンバとする
	
	2.2 特殊なメンバ
		AirpEngineのメンバは以下の特殊なメンバを持つ,<>内はメンバの型
		
		<function> __call
			クラスのコンストラクタ メソッド,AE2.importメソッドにてクラスが読み込まれた場合
			自動的にメタテーブルで設定される.
		
		<boolean> _AE2_CLASS_[CLASSNAME}
			[CLASSNAME]の部分はそのクラスの名称となる.全て大文字である.
			値は常にtrueとなる.クラスの判定及び継承の実装に利用される.
		
		<boolean> _AE2_CLASS_ISINSTANCE
			クラスの宣言時はfalseとし,__callメソッドでインスタンスが生成された場合にのみ
			trueとなる.インスタンスの判定に利用される.
	
	2.3 インスタンスとstaticメンバ
		クラスは全てインスタンスとして扱われる,よって全てのクラスはインスタンス生成用のメソッドを持つ.
		例えすべての動作が静的になりうるとしても、クラスはインスタンスを生成する.
	
	2.4 クラスの判定
		クラスの判定にAE2.isClassメソッド及びAE2.isInstanceメソッドが利用できる.

3. リファレンス
	AirpEngine2の各種メンバのリファレンス.
	<> = 型
	[] = 省略可能な引数
	{} = 返却する値
	
	<table> AE2
		AE2名前空間
	
	<function> AE2.import(library) {table}
		指定されたライブラリを読み込みテーブルを返却する
	
	<function> AE2.isClass(class, className) {boolean}
		指定されたクラスが指定されたクラス名(全て大文字)であるかを確認する
	
	<function> AE2.isInstance(instance[, className]) {boolean}
		指定されたインスタンスがインスタンスであるかを確認する
		classNameが指定されていれば指定されたクラス名(全て大文字)であるかも確認する
	
	<table/function> AE2.Toolkit {table}
		LuaやSMBX組み込みクラスの拡張を行うためのクラス
		関数として呼び出すとインスタンスを生成し返却する
	
		<function> Toolkit.extend()
			Lua及びSMBX組み込みクラスを拡張する
	